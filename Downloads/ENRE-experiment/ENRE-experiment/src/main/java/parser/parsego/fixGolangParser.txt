/**
	 * Returns {@code true} iff on the current index of the parser's
	 * token stream a token exists on the {@code HIDDEN} channel which
	 * either is a line terminator, or is a multi line comment that
	 * contains a line terminator.
	 *
	 * @return {@code true} iff on the current index of the parser's
	 * token stream a token exists on the {@code HIDDEN} channel which
	 * either is a line terminator, or is a multi line comment that
	 * contains a line terminator.
	 */
	private boolean lineTerminatorAhead() {
		// Get the token ahead of the current index.
		int possibleIndexEosToken = this.getCurrentToken().getTokenIndex() - 1;
		Token ahead = _input.get(possibleIndexEosToken);
		if (ahead.getChannel() != Lexer.HIDDEN) {
			// We're only interested in tokens on the HIDDEN channel.
			return false;
		}

		if (ahead.getType() == TERMINATOR) {
			// There is definitely a line terminator ahead.
			return true;
		}

		if (ahead.getType() == WS) {
			// Get the token ahead of the current whitespaces.
			possibleIndexEosToken = this.getCurrentToken().getTokenIndex() - 2;
			ahead = _input.get(possibleIndexEosToken);
		}

		// Get the token's text and type.
		String text = ahead.getText();
		int type = ahead.getType();

		// Check if the token is, or contains a line terminator.
		return (type == COMMENT && (text.contains("\r") || text.contains("\n"))) ||
				(type == TERMINATOR);
	}